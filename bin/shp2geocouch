#!/usr/bin/env ruby
require 'httparty'
require 'couchrest'
require 'optparse'
require 'iconv'
require 'net/http'
require 'uri'

class ShapefileToGeoCouch
  attr_accessor :path, :extension, :name, :database_url, :cleanup, :verbose, :chunksize, :uri
  
  def initialize(options)
    set_accessors(options)
    @uri = parse_database_url
    @db = CouchRest.database! @database_url
    @geocouch_utils = "http://max.iriscouch.com/apps"
    verify_dependencies
    convert
    upload
    add_ddoc
    cleanup if @cleanup
    puts "Upload complete. Test your data at #{@database_url}/_design/geo/_spatial/full?bbox=-180,180,-90,90" if @verbose
  end
  
  def set_accessors(options)
    options.each {|k,v| send("#{k.to_s}=",v)}
  end
  
  def verify_dependencies
    %w(ogr2ogr sed unzip).each do |dependency|
      unless %x!which #{dependency}![dependency]
        raise "#{dependency} isn't installed or isn't in your current path."
      end
    end
  end
  
  def parse_database_url
    URI.parse(@database_url)
  end
  
  def couch_url
    port = @uri.port && @uri.port != 80 ? ":#{@uri.port}" : ""
    "#{@uri.scheme}://#{@uri.host}#{port}"
  end

  def output_folder
    File.expand_path("#{@name}_converted", Dir.pwd)
  end
  
  def find_shapefile
    Dir.glob(output_folder + "/**/*.shp")[0]
  end
  
  def json
    "#{output_folder}/#{@name}.json"
  end
  
  def bulk
    "#{output_folder}/#{@name}_bulk.json"
  end
  
  def unzip
    puts "Unzipping into #{output_folder}..." if @verbose
    `unzip #{@path} -d #{output_folder}`
  end

  def convert
    `mkdir -p #{output_folder}`
    if @extension =~ /zip/i
      unzip
      shapefile = find_shapefile
    else
      shapefile = @path
    end
    puts "Converting Shapefile, saving as #{json}..." if @verbose
    %x!ogr2ogr -t_srs EPSG:4326 -a_srs EPSG:4326 -f "GeoJSON" #{json} #{shapefile}!
    puts "Reformatting json for bulk import, saving as #{bulk}..." if @verbose
    %x!sed -e '/^\"type\": \"FeatureCollection\",$/d' -e '/^\"features\": \\[$/d' -e '/^{$/d' -e '/^,$/d' -e '/^}$/d' -e '/^]$/d' -e '/^$/d' -e 's/$/,/' #{json} > #{bulk}!
  end
  
  def post(string)
    ic = Iconv.new('UTF-8//IGNORE', 'UTF-8') # disregard all UTF8 characters
    valid_string = ic.iconv(string[0..-3] + '  ')[0..-3] # http://po-ru.com/diary/fixing-invalid-utf-8-in-ruby-revisited/
    HTTParty.post(@database_url + '/_bulk_docs', :body => '{"docs": [' + valid_string + "]}", :headers => {'content-type' => "application/json"})
  end
  
  def upload
    puts "Bulk loading data into GeoCouch... view progress at #{@database_url}/_utils" if @verbose
    group = []
    length = File.open(bulk).lines.count - 1
    File.open(bulk).each_with_index do |line, index|
      if (index % @chunksize == 0)
        post(group.join(''))
        group = [line]
        next
      end
      if (index == length)
        group << line
        post(group.join(''))
        next
      end
      group << line
    end
  end
  
  # replicates geocouch-utils into the db via http://max.iriscouch.com/apps/_design/geo
  def add_ddoc
    puts "Replicating http://github.com/maxogden/geocouch-utils..." if @verbose
    view_exists = @db.get('_design/geo') rescue false
    internet_connection = HTTParty.get(@geocouch_utils) rescue false
    if !view_exists && internet_connection
      resp = HTTParty.post(couch_url + '/_replicate', 
        :body => '{"source":' + @geocouch_utils + ',"target":"' + @name + '", "doc_ids":["_design/geo"]}', 
        :headers => {'content-type' => "application/json"}
      )
      resp = JSON.parse(resp)
      if ((resp.keys.include? 'ok') && (resp['ok'] == true))
        puts "View your data at #{@database_url}/_design/geo/_rewrite"
      else
        puts "View your data at http://#{couch_url}/_utils"
      end
    elsif @verbose
      puts "Did not push geocouch-utils -- either it already exists or internet is off"
      puts "You can get geocouch-utils from http://github.com/maxogden/geocouch-utils"
    end 
  end
  
  def cleanup
    puts "Cleaning up..." if @verbose
    %x!rm -rf #{output_folder}!
  end
end  

defaults = {:cleanup => true, :verbose => false, :chunksize => 50}
OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} [path-to-shapefile] [your-geocouch-url (optional, default: http://localhost:5984/zip_filename)]"
  opts.on("--no-cleanup", "Don't remove converted files after upload") do |v|
    defaults[:cleanup] = false
  end
  
  opts.on("--chunksize [SIZE]", "Couch bulk docs interface lines per chunk PUT (default 50)") do |size|
    defaults[:chunksize] = size.to_i
  end
  
  opts.on('-v') do |v|
    defaults[:verbose] = true
  end
end.parse!

raise "You must specify a Shapefile to convert." if ARGV[0].nil?

extension = ARGV[0].split('.')[1]
raise "You must specify a .shp or a .zip" unless extension =~ /zip|shp/i

name = ARGV[0].split('/')[-1].split('.')[0]

options = {:path => ARGV[0], :name => name.downcase, :extension => extension}.merge(defaults)
options[:database_url] = ARGV[1] || "http://localhost:5984/#{name.downcase}"

ShapefileToGeoCouch.new(options)