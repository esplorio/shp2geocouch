#!/usr/bin/env ruby
require 'httparty'
require 'couchrest'
require 'optparse'

class ShapefileToGeoCouch
  attr_accessor :filename, :couch_url
  
  def initialize
    @db = CouchRest.database! @couch_url
    verify_dependencies
    convert
    upload
    add_ddoc
  end
  
  def verify_dependencies
    %w(ogr2ogr sed).each do |dependency|
      unless system("which #{dependency}")
        raise "#{dependency} isn't installed or isn't in your current path."
      end
    end
    begin
      @db.get('_all_dbs')
    rescue Errno::ECONNREFUSED
      raise "Couldnt find a Couch instance running at #{@couch_url}"
    end
  end

  def shapefile
    @filename + '.shp'
  end
  
  def json
    @filename + '.json'
  end
  
  def bulk
    @filename + '_bulk.json'
  end
  
  def database_url
    'http://localhost:5984/' + @filename
  end

  def convert
    puts "Converting Shapefile, saving as #{json}..."
    `ogr2ogr -t_srs EPSG:4326 -a_srs EPSG:4326 -f "GeoJSON" #{json} #{shapefile}`
    puts "Reformatting json for bulk import, saving as #{bulk}..."
    system("sed -e '/^\"type\": \"FeatureCollection\",$/d' -e '/^\"features\": \\[$/d' -e '/^{$/d' -e '/^,$/d' -e '/^}$/d' -e '/^]$/d' -e '/^$/d' -e 's/$/,/' #{json} > #{bulk}")
  end
  
  def upload
    File.open(bulk).each_line do |line|
       HTTParty.post(database_url + '/`_bulk_docs`', :body => '{"docs": [' + line[0..-3] + "]}", :headers => {'content-type' => "application/json"})
     end
  end
  
  def add_ddoc
    view_exists = db.get('_design/geojson') rescue false
    unless view_exists
      db.save_doc({
        "_id" => "_design/geojson",
        "spatial" => {
          :points => "function(doc) { emit(doc.geometry, {id: doc._id, geometry: doc.geometry}) };"
        }
      })
    end
  end
end  

raise "You must specify a Shapefile to convert." if ARGV[0].nil?
options = {:filename => ARGV[0]}
options[:couch_url] = ARGV[1] || "http://localhost:5984"

OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} [path-to-shapefile] [your-geocouch-root-url (optional, default: http://localhost:5984)]"
end.parse!

# converter = ShapefileToGeoCouch.new(options)