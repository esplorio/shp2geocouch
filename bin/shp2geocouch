#!/usr/bin/env ruby
require 'httparty'
require 'couchrest'
require 'optparse'
require 'iconv'

class ShapefileToGeoCouch
  attr_accessor :path, :extension, :name, :couch_url, :cleanup, :verbose, :chunksize
  
  def initialize(options)
    set_accessors(options)
    @db = CouchRest.database! @couch_url
    verify_dependencies
    convert
    upload
    add_ddoc
    cleanup if @cleanup
    puts "Upload complete. Test your data at #{database_url}/_design/geojson/_spatial/points?bbox=-180,180,-90,90" if @verbose
  end
  
  def set_accessors(options)
    options.each {|k,v| send("#{k.to_s}=",v)}
  end
  
  def verify_dependencies
    %w(ogr2ogr sed unzip).each do |dependency|
      unless %x!which #{dependency}![dependency]
        raise "#{dependency} isn't installed or isn't in your current path."
      end
    end
  end
  
  def database_url
    @couch_url
  end

  def output_folder
    File.expand_path("#{@name}_converted", Dir.pwd)
  end
  
  def find_shapefile
    Dir.glob(output_folder + "/**/*.shp")[0]
  end
  
  def json
    "#{output_folder}/#{@name}.json"
  end
  
  def bulk
    "#{output_folder}/#{@name}_bulk.json"
  end
  
  def unzip
    puts "Unzipping into #{output_folder}..." if @verbose
    `unzip #{@path} -d #{output_folder}`
  end

  def convert
    `mkdir -p #{output_folder}`
    if @extension =~ /zip/i
      unzip
      shapefile = find_shapefile
    else
      shapefile = @path
    end
    puts "Converting Shapefile, saving as #{json}..." if @verbose
    %x!ogr2ogr -t_srs EPSG:4326 -a_srs EPSG:4326 -f "GeoJSON" #{json} #{shapefile}!
    puts "Reformatting json for bulk import, saving as #{bulk}..." if @verbose
    %x!sed -e '/^\"type\": \"FeatureCollection\",$/d' -e '/^\"features\": \\[$/d' -e '/^{$/d' -e '/^,$/d' -e '/^}$/d' -e '/^]$/d' -e '/^$/d' -e 's/$/,/' #{json} > #{bulk}!
  end
  
  def post(string)
    ic = Iconv.new('UTF-8//IGNORE', 'UTF-8') # disregard all UTF8 characters
    valid_string = ic.iconv(string[0..-3] + '  ')[0..-3] # http://po-ru.com/diary/fixing-invalid-utf-8-in-ruby-revisited/
    HTTParty.post(database_url + '/_bulk_docs', :body => '{"docs": [' + valid_string + "]}", :headers => {'content-type' => "application/json"})
  end
  
  def upload
    puts "Bulk loading data into GeoCouch... view progress at #{@couch_url}/_utils" if @verbose
    group = []
    length = File.open(bulk).lines.count - 1
    File.open(bulk).each_with_index do |line, index|
      if (index % @chunksize == 0)
        post(group.join(''))
        group = [line]
        next
      end
      if (index == length)
        group << line
        post(group.join(''))
        next
      end
      group << line
    end
  end
  
  def add_ddoc
    puts "Adding spatial index design document..." if @verbose
    view_exists = @db.get('_design/geojson') rescue false
    unless view_exists
      @db.save_doc({
        "_id" => "_design/geojson",
        "spatial" => {
          :points => "function(doc) { if(doc.geometry){emit(doc.geometry, {id: doc._id, geometry: doc.geometry})} };"
        }
      })
    end
  end
  
  def cleanup
    puts "Cleaning up..." if @verbose
    %x!rm -rf #{output_folder}!
  end
end  

defaults = {:cleanup => true, :verbose => false, :chunksize => 50}
OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} [path-to-shapefile] [your-geocouch-url (optional, default: http://localhost:5984/zip_filename)]"
  opts.on("--no-cleanup", "Don't remove converted files after upload") do |v|
    defaults[:cleanup] = false
  end
  
  opts.on("--chunksize [SIZE]", "Couch bulk docs interface lines per chunk PUT (default 50)") do |size|
    defaults[:chunksize] = size.to_i
  end
  
  opts.on('-v') do |v|
    defaults[:verbose] = true
  end
end.parse!

raise "You must specify a Shapefile to convert." if ARGV[0].nil?

extension = ARGV[0].split('.')[1]
raise "You must specify a .shp or a .zip" unless extension =~ /zip|shp/i

name = ARGV[0].split('/')[-1].split('.')[0]

options = {:path => ARGV[0], :name => name.downcase, :extension => extension}.merge(defaults)
options[:couch_url] = ARGV[1] || "http://localhost:5984/#{name.downcase}"

ShapefileToGeoCouch.new(options)